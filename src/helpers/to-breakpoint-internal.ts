import {
  BreakpointCollection,
  ExportableCollection,
} from "../models/collection-types.model";
import { ExportableBreakpoint } from "../models/exportable-breakpoint";
import * as vscode from "vscode";
import { toExportableBreakpoint } from "./create-exportable-breakpoint";

/**
 * The function `toExportableCollection` converts a `BreakpointCollection` into an
 * `ExportableCollection` by mapping each breakpoint to an `ExportableBreakpoint`.
 * @param {BreakpointCollection} collection - `BreakpointCollection` - A collection of breakpoints
 * containing a name and an array of `vscode.Breakpoint` objects.
 * @param {number} workspace_uri_path_length - The `workspace_uri_path_length` parameter represents the
 * length of the workspace URI path. This value is used in the `toExportableCollection` function to
 * convert a `BreakpointCollection` into an `ExportableCollection` by creating an array of
 * `ExportableBreakpoint` objects.
 * @returns An object is being returned with the properties `name` and `breakpoints`. The `name`
 * property is taken from the `collection` parameter, and the `breakpoints` property is an array of
 * `ExportableBreakpoint` objects generated by mapping over the breakpoints in the `collection` and
 * converting them using the `toExportableBreakpoint` function.
 */
export function toExportableCollection(
  collection: BreakpointCollection,
  workspace_uri_path_length: number
): ExportableCollection {
  const exportable_breakpoints: ExportableBreakpoint[] = [];
  collection?.breakpoints.forEach((breakpoint: vscode.Breakpoint) => {
    exportable_breakpoints.push(
      toExportableBreakpoint(breakpoint, workspace_uri_path_length)
    );
  });
  return { name: collection.name, breakpoints: exportable_breakpoints };
}
