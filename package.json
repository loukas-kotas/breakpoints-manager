{
  "name": "breakpoints-manager",
  "displayName": "Breakpoints Manager",
  "description": "Manage breakpoint collections: create, update, export, and import for efficient debugging.",
  "version": "0.0.1",
  "publisher": "Loukas Kotas",
  "license": "MIT",
  "engines": {
    "vscode": "^1.93.0"
  },
  "repository": {
    "url": "https://github.com/loukas-kotas/breakpoints-manager"
  },
  "bugs": {
    "url": "https://github.com/loukas-kotas/breakpoints-manager/issues"
  },
  "keywords": [
    "vscode",
    "debugging",
    "breakpoints",
    "management",
    "json",
    "import",
    "export"
  ],
  "categories": [
    "Debuggers",
    "Programming Languages",
    "Testing",
    "Other"
  ],
  "activationEvents": [
    "onStartupFinished"
  ],
  "main": "./out/extension.js",
  "icon": "media/breakpoints-manager-128.png",
  "contributes": {
    "viewsContainers": {},
    "views": {
      "debug": [
        {
          "id": "breakpointsCollection",
          "name": "Breakpoints Manager",
          "contextualTitle": "Breakpoints Manager"
        }
      ]
    },
    "menus": {
      "view/title": [
        {
          "command": "breakpointsmanager.createCollection",
          "when": "view == breakpointsCollection",
          "group": "navigation@1"
        },
        {
          "command": "breakpointsmanager.searchCollection",
          "when": "view == breakpointsCollection",
          "group": "navigation@2"
        },
        {
          "command": "breakpointsmanager.refreshTree",
          "when": "view == breakpointsCollection",
          "group": "navigation@3"
        },
        {
          "command": "breakpointsmanager.exportSelectedCollections",
          "when": "view === breakpointsCollection",
          "group": "navigation@4"
        },
        {
          "command": "breakpointsmanager.importCollection",
          "when": "view == breakpointsCollection",
          "group": "navigation@5"
        },
        {
          "command": "breakpointsmanager.removeSelectedCollections",
          "when": "view == breakpointsCollection",
          "group": "navigation@6"
        }
      ],
      "view/item/context": [
        {
          "command": "breakpointsmanager.updateCollection",
          "when": "view == breakpointsCollection && viewItem == 'collectionWithIcons'",
          "group": "inline"
        },
        {
          "command": "breakpointsmanager.setActiveCollection",
          "when": "view == breakpointsCollection && viewItem == 'collectionWithIcons'",
          "group": "inline"
        }
      ]
    },
    "commands": [
      {
        "command": "breakpointsmanager.createCollection",
        "title": "Create Collection (Breakpoints Manager)",
        "icon": "$(plus)"
      },
      {
        "command": "breakpointsmanager.removeSelectedCollections",
        "title": "Remove Selected Collections (Breakpoints Manager)",
        "icon": "$(close-all)"
      },
      {
        "command": "breakpointsmanager.setActiveCollection",
        "title": "Set Active Breakpoints Collection (Breakpoints Manager)",
        "icon": "$(arrow-up)"
      },
      {
        "command": "breakpointsmanager.updateCollection",
        "title": "Update Collection (Breakpoints Manager)",
        "icon": "$(save)"
      },
      {
        "command": "breakpointsmanager.exportSelectedCollections",
        "title": "Export Selected Collections as JSON (Breakpoints Manager)",
        "icon": "$(cloud-download)"
      },
      {
        "command": "breakpointsmanager.importCollection",
        "title": "Import Collection from JSON (Breakpoints Manager)",
        "icon": "$(cloud-upload)"
      },
      {
        "command": "breakpointsmanager.searchCollection",
        "title": "Search Collection (Breakpoints Manager)",
        "icon": "$(search)"
      },
      {
        "command": "breakpointsmanager.refreshTree",
        "title": "Refresh (Breakpoints Manager)",
        "icon": "$(refresh)"
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src",
    "test": "vscode-test"
  },
  "devDependencies": {
    "@types/mocha": "^10.0.7",
    "@types/node": "20.x",
    "@types/vscode": "^1.93.0",
    "@typescript-eslint/eslint-plugin": "^8.3.0",
    "@typescript-eslint/parser": "^8.3.0",
    "@vscode/test-cli": "^0.0.10",
    "@vscode/test-electron": "^2.4.1",
    "eslint": "^9.9.1",
    "typescript": "^5.5.4"
  }
}
